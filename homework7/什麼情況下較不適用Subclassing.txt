Subclassing 適合靜態、單一情境的覆寫需求，當需要動態行為、驗證互動等行為時，選擇 Stub 或 Mock 會更靈活高效。以下舉幾個例子說明:
1. 測試需要動態行為或多種情境: Subclassing 是靜態的設計，無法根據運行時條件動態調整行為。當測試需要不同輸入對應多種輸出，或需要靈活改變行為時，Mock 是更好的選擇。
2. 測試目的是驗證方法的互動: 如果測試需要檢查某方法是否被調用、調用次數或順序，Subclassing 無法記錄這些互動歷史，而 Mock 專門設計用來解決此類需求。
3.父類邏輯過於複雜: 當父類實現了過多與測試無關的邏輯，繼承父類可能引入多餘的行為，干擾測試結果。Stub 可以提供輕量替代，避免額外的複雜性。